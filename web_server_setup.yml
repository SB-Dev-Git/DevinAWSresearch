---
- name: 包括的Webサーバセットアップ - Hello Worldアプリケーションデプロイ
  hosts: target_servers
  become: yes
  gather_facts: yes
  
  vars:
    app_name: hello-world-webapp
    app_user: nodejs
    app_dir: /opt/{{ app_name }}
    domain_name: "{{ ansible_default_ipv4.address }}"
    
  tasks:
    # システム更新とGitインストール
    - name: システムパッケージ更新
      yum:
        name: "*"
        state: latest
        
    - name: Gitインストール
      yum:
        name: git
        state: present
        
    # Node.js用ユーザー作成
    - name: Node.jsアプリケーション用ユーザー作成
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: "{{ app_dir }}"
        create_home: yes
        
    # Node.jsとnpmインストール（直接ダウンロード方式）
    - name: Node.js 16.x LTS直接ダウンロード・インストール
      shell: |
        cd /tmp
        curl -fsSL https://nodejs.org/dist/v16.20.2/node-v16.20.2-linux-x64.tar.xz -o node-v16.20.2-linux-x64.tar.xz
        tar -xf node-v16.20.2-linux-x64.tar.xz
        cp -r node-v16.20.2-linux-x64/* /usr/local/
        ln -sf /usr/local/bin/node /usr/bin/node
        ln -sf /usr/local/bin/npm /usr/bin/npm
      become: yes
      args:
        creates: /usr/bin/node

    - name: Node.jsインストール確認
      command: /usr/bin/node --version
      register: node_version_check

    - name: npmインストール確認
      command: /usr/bin/npm --version
      register: npm_version_check
        
    - name: Node.jsバージョン確認
      command: node --version
      register: node_version
      
    - name: Node.jsバージョン表示
      debug:
        msg: "インストールされたNode.jsバージョン: {{ node_version.stdout }}"
        
    # アプリケーションディレクトリ作成とコードデプロイ
    - name: アプリケーションディレクトリ作成
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        
    - name: package.json作成
      copy:
        content: |
          {
            "name": "hello-world-webapp",
            "version": "1.0.0",
            "description": "Node.jsで作成したHello Worldウェブアプリケーション",
            "main": "app.js",
            "scripts": {
              "start": "node app.js",
              "dev": "node app.js"
            },
            "dependencies": {
              "express": "^4.18.2"
            },
            "keywords": ["nodejs", "express", "hello-world", "webapp"],
            "author": "oshima.yoshie@ditgroup.jp",
            "license": "MIT"
          }
        dest: "{{ app_dir }}/package.json"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
        
    - name: app.js作成
      copy:
        content: |
          const express = require('express');
          const app = express();
          const port = 3000;

          app.get('/', (req, res) => {
            res.send(`
              <!DOCTYPE html>
              <html lang="ja">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Hello World - Node.js ウェブアプリ</title>
                  <style>
                      body {
                          font-family: Arial, sans-serif;
                          display: flex;
                          justify-content: center;
                          align-items: center;
                          height: 100vh;
                          margin: 0;
                          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                          color: white;
                      }
                      .container {
                          text-align: center;
                          padding: 2rem;
                          border-radius: 10px;
                          background: rgba(255, 255, 255, 0.1);
                          backdrop-filter: blur(10px);
                          box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
                      }
                      h1 {
                          font-size: 3rem;
                          margin-bottom: 1rem;
                          text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                      }
                      p {
                          font-size: 1.2rem;
                          margin-bottom: 0.5rem;
                      }
                      .info {
                          font-size: 0.9rem;
                          opacity: 0.8;
                          margin-top: 2rem;
                      }
                      .server-info {
                          font-size: 0.8rem;
                          margin-top: 1rem;
                          padding: 1rem;
                          background: rgba(0, 0, 0, 0.2);
                          border-radius: 5px;
                      }
                  </style>
              </head>
              <body>
                  <div class="container">
                      <h1>Hello World!</h1>
                      <p>Node.jsで作成されたウェブアプリケーション</p>
                      <p>Express.jsを使用してサーバーを構築</p>
                      <div class="info">
                          <p>ポート: ${port}</p>
                          <p>作成者: oshima.yoshie@ditgroup.jp</p>
                      </div>
                      <div class="server-info">
                          <p>🚀 Ansibleによる自動デプロイ完了</p>
                          <p>🔒 Nginx + Let's Encrypt SSL対応</p>
                          <p>⚡ systemdサービス化済み</p>
                      </div>
                  </div>
              </body>
              </html>
            `);
          });

          app.listen(port, '127.0.0.1', () => {
            console.log(`🚀 Hello Worldウェブアプリが起動しました！`);
            console.log(`📱 ローカルアクセス: http://127.0.0.1:${port}`);
            console.log(`⏰ 起動時刻: ${new Date().toLocaleString('ja-JP')}`);
          });
        dest: "{{ app_dir }}/app.js"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
        
    # npm依存関係インストール
    - name: npm依存関係インストール
      npm:
        path: "{{ app_dir }}"
        state: present
      become_user: "{{ app_user }}"
      
    # systemdサービス設定
    - name: systemdサービスファイル作成
      copy:
        content: |
          [Unit]
          Description=Hello World Node.js Application
          After=network.target

          [Service]
          Type=simple
          User={{ app_user }}
          WorkingDirectory={{ app_dir }}
          ExecStart=/usr/bin/node app.js
          Restart=always
          RestartSec=10
          Environment=NODE_ENV=production

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/{{ app_name }}.service
        mode: '0644'
        
    - name: systemdデーモンリロード
      systemd:
        daemon_reload: yes
        
    - name: Node.jsアプリケーションサービス有効化・起動
      systemd:
        name: "{{ app_name }}"
        enabled: yes
        state: started
        
    # Nginxインストールと設定
    - name: Amazon Linux ExtrasでNginxインストール
      shell: amazon-linux-extras install nginx1 -y
      become: yes
      args:
        creates: /usr/sbin/nginx
        
    - name: Nginx設定ファイル作成（HTTP初期設定）
      copy:
        content: |
          server {
              listen 80;
              server_name {{ domain_name }} {{ ansible_default_ipv4.address }};
              
              # セキュリティヘッダー
              add_header X-Frame-Options DENY always;
              add_header X-Content-Type-Options nosniff always;
              add_header X-XSS-Protection "1; mode=block" always;
              
              # Let's Encrypt証明書検証用
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
              
              # Node.jsアプリケーションへのリバースプロキシ
              location / {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
        dest: /etc/nginx/conf.d/{{ app_name }}.conf
        backup: yes
        
    # Let's Encrypt Certbotインストール
    - name: Amazon Linux ExtrasでEPELリポジトリ有効化
      shell: amazon-linux-extras install epel -y
      become: yes
      args:
        creates: /etc/yum.repos.d/epel.repo
        
    - name: Certbotインストール
      yum:
        name: 
          - certbot
          - python2-certbot-nginx
        state: present
        
    # ファイアウォール設定（Amazon Linux 2対応）
    - name: firewalldインストール
      yum:
        name: firewalld
        state: present
      become: yes
        
    - name: firewalldサービス確認・起動
      systemd:
        name: firewalld
        enabled: yes
        state: started
        
    - name: HTTP許可（ファイアウォール）
      firewalld:
        service: http
        permanent: yes
        state: enabled
        immediate: yes
        
    - name: HTTPS許可（ファイアウォール）
      firewalld:
        service: https
        permanent: yes
        state: enabled
        immediate: yes
        
    # /var/www/htmlディレクトリ作成（Let's Encrypt用）
    - name: /var/www/htmlディレクトリ作成
      file:
        path: /var/www/html
        state: directory
        mode: '0755'
        
    - name: デフォルトNginx設定無効化
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
        
    - name: Nginx設定テスト
      command: nginx -t
      register: nginx_test
      
    - name: Nginx設定テスト結果表示
      debug:
        var: nginx_test.stdout_lines
        
    - name: Nginx有効化・起動
      systemd:
        name: nginx
        enabled: yes
        state: started
        
    # Let's Encrypt SSL証明書取得（注意：実際のドメインが必要）
    - name: SSL証明書取得準備メッセージ
      debug:
        msg: |
          ⚠️  SSL証明書の取得について:
          - 実際のドメイン名が必要です（IPアドレスでは取得できません）
          - DNS設定でドメインがこのサーバのIPアドレスを指している必要があります
          - 以下のコマンドで手動取得してください:
          sudo certbot --nginx -d your-domain.com
          
    # サービス状態確認
    - name: Node.jsアプリケーションサービス状態確認
      systemd:
        name: "{{ app_name }}"
      register: app_service_status
      
    - name: Nginxサービス状態確認
      systemd:
        name: nginx
      register: nginx_service_status
      
    - name: サービス状態表示
      debug:
        msg: |
          📊 サービス状態:
          - {{ app_name }}: {{ app_service_status.status.ActiveState }}
          - nginx: {{ nginx_service_status.status.ActiveState }}
          
    # 最終確認とアクセス情報
    - name: デプロイ完了メッセージ
      debug:
        msg: |
          🎉 Hello World Node.jsアプリケーションのデプロイが完了しました！
          
          📱 アクセス情報:
          - HTTP: http://{{ ansible_default_ipv4.address }}
          - HTTPS: https://{{ ansible_default_ipv4.address }} (SSL証明書設定後)
          
          🔧 設定済み機能:
          ✅ Git インストール
          ✅ Node.js/npm インストール  
          ✅ Hello Worldアプリケーションデプロイ
          ✅ systemdサービス化
          ✅ Nginx リバースプロキシ設定
          ✅ ファイアウォール設定 (HTTP/HTTPS許可)
          ⚠️  Let's Encrypt SSL証明書 (手動設定が必要)
          
          📝 次のステップ:
          1. 実際のドメイン名を取得
          2. DNS設定でドメインをサーバIPに向ける  
          3. certbot --nginx -d your-domain.com でSSL証明書取得
          4. Nginx設定を本番用に更新
